type: edu
custom_name: "Welcome, customer!"
files:
- name: src/carsharing/Main.java
  visible: true
  text: |-
    package carsharing;

    public class Main {

        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/CarSharingTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.BeforeClass;

    import java.io.File;

    public class CarSharingTest extends StageTest<Void> {

        private static final String databaseFileName = "src/carsharing/db/carsharing.mv.db";
        private static DatabaseUtil db = new DatabaseUtil();

        @BeforeClass
        public static void deleteDatabaseFile() {
            File file = new File(databaseFileName);

            if (!file.exists()) {
                return;
            }

            if (!file.delete()) {
                throw new WrongAnswer("Can't delete database file before starting your program.\n" +
                    "Make sure you close all the connections with the database file!");
            }
        }

        @DynamicTest(order = 1)
        public CheckResult test2_ifDatabaseExist() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");
            program.execute("0");

            if (!program.isFinished()) {
                return CheckResult.wrong("After choosing 'Exit' item your program should stop.");
            }

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("Can't find a database file. It should be named 'carsharing.mv.db'" +
                    " and located in /carsharing/db/ folder.\n" +
                    "The file should be created right after starting the program!");
            }

            return correct();
        }

        @DynamicTest(order = 2)
        public CheckResult test1_testMenu() {
            TestedProgram program = new TestedProgram();
            String output = program.start("-databaseFileName", "carsharing");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("Start menu should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("Start menu should contain \"0. Exit\"");
            }

            output = program.execute("1");

            if (!output.contains("1. Company list")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '1. Company list' item");
            }

            if (!output.contains("2. Create a company")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '2. Create a company' item");
            }

            if (!output.contains("0. Back")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '0. Back' item");
            }

            output = program.execute("0");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"0. Exit\"");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        public CheckResult test3_checkDatabaseConnection() {
            db.getConnection();
            return correct();
        }

        @DynamicTest(order = 4)
        public CheckResult test4_checkIfTableExists() {
            if (!db.ifTableExist("company")) {
                return wrong("Can't find table named 'company'");
            }
            if (!db.ifTableExist("car")) {
                return wrong("Can't find table named 'car'");
            }
            return correct();
        }

        @DynamicTest(order = 5)
        public CheckResult test5_checkTableColumns() {
            String[][] companyColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}};
            db.ifColumnsExist("company", companyColumns);
            db.checkCompanyColumnProperties();

            String[][] carColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}, {"COMPANY_ID", "INT"}};
            db.ifColumnsExist("car", carColumns);
            db.checkCarColumnProperties();

            String[][] customerColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}, {"RENTED_CAR_ID", "INT"}};
            db.ifColumnsExist("customer", customerColumns);
            db.checkCustomerColumnProperties();
            return correct();
        }

        @DynamicTest(order = 6)
        public CheckResult test6_testAddCompany() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");

            db.clearCustomerTable();
            db.clearCarTable();
            db.clearCompanyTable();

            program.execute("1");
            String output = program.execute("1");

            if (!output.contains("The company list is empty")) {
                return wrong("If no company has been created you should print 'The company list is empty' when '1. Company list' item is chosen");
            }

            output = program.execute("2");

            if (!output.contains("Enter the company name")) {
                return wrong("After choosing '2. Create a company' item you should ask to enter a company name.\n" +
                    "Your output should contain 'Enter the company name:'");
            }

            program.execute("Super company");
            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '1. Super company'");
            }

            db.checkCompany("Super company");

            program.execute("0\n2\nAnother company");
            program.execute("2\nOne more company");

            db.checkCompany("Another company");
            db.checkCompany("One more company");

            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return wrong("In the company list expected 'Super company' company.\n" +
                    "Your output should contain '1. Super company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Another company")) {
                return wrong("In the company list expected 'Another company' company.\n" +
                    "Your output should contain '2. Another company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("3. One more company")) {
                return wrong("In the company list expected 'One more company' company.\n" +
                    "Your output should contain '2. One more company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            program.execute("2");

            return correct();
        }

        @DynamicTest(order = 7)
        public CheckResult test7_testAddCar() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");
            String output;

            db.clearCarTable();
            db.clearCompanyTable();
            db.clearCustomerTable();

            program.execute("1");
            program.execute("2");
            program.execute("Car To Go");
            program.execute("2");
            program.execute("Drive Now");

            db.checkCompany("Car To Go");
            db.checkCompany("Drive Now");

            output = program.execute("1");

            if (!output.contains("1. Car To Go")) {
                return wrong("In the company list expected 'Car To Go' company.\n" +
                    "Your output should contain '1. Car To Go'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Drive Now")) {
                return wrong("In the company list expected 'Drive Now' company.\n" +
                    "Your output should contain '2. Drive Now'\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            output = program.execute("1");

            if (!output.contains("1. Car list")) {
                return wrong("After choosing company you should print menu that contains '1. Car list' item");
            }

            if (!output.contains("2. Create a car")) {
                return wrong("After choosing company you should print menu that contains '2. Create a car' item");
            }

            if (!output.contains("0. Back")) {
                return wrong("After choosing company you should print menu that contains '0. Back' item");
            }

            output = program.execute("1");

            if (!output.contains("The car list is empty!")) {
                return wrong("If no cars were added to the company you should print 'The car list is empty!'");
            }

            output = program.execute("2");

            if (!output.contains("Enter the car name:")) {
                return wrong("After choosing 'Create a car' item you should ask to enter a car name. " +
                    "Your output should contain 'Enter the car name:'");
            }

            program.execute("Hyundai Venue");
            db.checkCar("Car To Go", "Hyundai Venue");

            program.execute("2");
            program.execute("Maruti Suzuki Dzire");
            db.checkCar("Car To Go", "Maruti Suzuki Dzire");

            output = program.execute("1");

            if (!output.contains("1. Hyundai Venue")) {
                return wrong("In the car list expected 'Hyundai Venue' car.\n" +
                    "Your output should contain '1. Hyundai Venue'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            if (!output.contains("2. Maruti Suzuki Dzire")) {
                return wrong("In the car list expected 'Maruti Suzuki Dzire' car.\n" +
                    "Your output should contain '2. Maruti Suzuki Dzire'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            program.execute("0");

            program.execute("1");
            program.execute("2");

            output = program.execute("1");

            if (!output.contains("The car list is empty!")) {
                return wrong("If no cars were added to the company you should print 'The car list is empty!'");
            }

            program.execute("2");
            program.execute("Lamborghini Urraco");

            output = program.execute("1");

            if (!output.contains("1. Lamborghini Urraco")) {
                return wrong("In the car list expected 'Lamborghini Urraco' car.\n" +
                    "Your output should contain '1. Lamborghini Urraco'");
            }

            if (output.contains("Hyundai Venue")) {
                return wrong("Your output contains 'Hyundai Venue'. This car is from another company");
            }

            if (output.contains("Maruti Suzuki Dzire")) {
                return wrong("Your output contains 'Maruti Suzuki Dzire'. This car is from another company");
            }

            db.checkCar("Drive Now", "Lamborghini Urraco");

            program.execute("0");
            program.execute("0");
            program.execute("0");

            return correct();
        }

        @DynamicTest(order = 8)
        public CheckResult test8_testAddCustomer() {

            TestedProgram program = new TestedProgram();
            String output = program.start("-databaseFileName", "carsharing");

            db.clearCustomerTable();

            if (!output.contains("2. Log in as a customer")) {
                return wrong("Start menu should contain \"2. Log in as a customer\"");
            }

            if (!output.contains("3. Create a customer")) {
                return wrong("Start menu should contain \"3. Create a customer\"");
            }

            output = program.execute("2");

            if (!output.contains("The customer list is empty!")) {
                return wrong("If no customers were created you should print 'The customer list is empty!'");
            }

            output = program.execute("3");

            if (!output.contains("Enter the customer name:")) {
                return wrong("After choosing '3. Create a customer' option you should ask to enter a customer name.\n" +
                    "Your output should contain 'Enter the customer name:'");
            }

            program.execute("First customer");
            db.checkCustomer("First customer", null);

            program.execute("3");
            output = program.execute("Second customer");
            db.checkCustomer("Second customer", null);

            if (!output.contains("2. Log in as a customer")) {
                return wrong("After creating a customer you should print main menu again.\n" +
                    "Your output should contain '2. Log in as a customer'");
            }

            output = program.execute("2");


            if (!output.contains("1. First customer")) {
                return wrong("In the customer list expected 'First customer' customer.\n" +
                    "Your output should contain '1. First customer'\n" +
                    "Customers should be sorted by 'ID' column");
            }

            if (!output.contains("2. Second customer")) {
                return wrong("In the customer list expected 'Second customer' customer.\n" +
                    "Your output should contain '2. Second customer'\n" +
                    "Customers should be sorted by 'ID' column");
            }

            output = program.execute("1");

            if (!output.contains("1. Rent a car")) {
                return wrong("After choosing customer you should print menu that contains '1. Rent a car' item");
            }

            if (!output.contains("2. Return a rented car")) {
                return wrong("After choosing customer you should print menu that contains '2. Return a rented car' item");
            }

            if (!output.contains("3. My rented car")) {
                return wrong("After choosing customer you should print menu that contains '3. My rented car' item");
            }

            if (!output.contains("0. Back")) {
                return wrong("After choosing customer you should print menu that contains '3. My rented car' item");
            }

            output = program.execute("3");

            if (!output.contains("You didn't rent a car!")) {
                return wrong("After choosing '3. My rented car' option you should print 'You didn't rent a car!' if a customer didn't rent a car.");
            }

            output = program.execute("2");

            if (!output.contains("You didn't rent a car!")) {
                return wrong("After choosing '2. Return a rented car' option you should print 'You didn't rent a car!' if a customer didn't rent a car.");
            }

            // If the output contains "You've returned a car!" it is wrong because the customer didn't rent a car
            if (output.contains("You've returned a rented car!")) {
                return wrong("After choosing '2. Return a rented car' option, the customer should not be able to return a car if they haven't rented one");
            }

            return correct();
        }

        @DynamicTest(order = 9)
        public CheckResult test9_testRentCar() {

            TestedProgram program = new TestedProgram();
            String output;
            program.start("-databaseFileName", "carsharing");

            db.checkCustomer("First customer", null);
            db.checkCustomer("Second customer", null);

            db.checkCompany("Car To Go");
            db.checkCompany("Drive Now");

            db.checkCar("Drive Now", "Lamborghini Urraco");
            db.checkCar("Car To Go", "Hyundai Venue");
            db.checkCar("Car To Go", "Maruti Suzuki Dzire");

            program.execute("2");
            program.execute("1");

            output = program.execute("1");

            if (!output.contains("1. Car To Go")) {
                return wrong("In the company list expected 'Car To Go' company.\n" +
                    "Your output should contain '1. Car To Go'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Drive Now")) {
                return wrong("In the company list expected 'Drive Now' company.\n" +
                    "Your output should contain '2. Drive Now'\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            output = program.execute("1");

            if (!output.contains("1. Hyundai Venue")) {
                return wrong("In the car list expected 'Hyundai Venue' car.\n" +
                    "Your output should contain '1. Hyundai Venue'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            if (!output.contains("2. Maruti Suzuki Dzire")) {
                return wrong("In the car list expected 'Maruti Suzuki Dzire' car.\n" +
                    "Your output should contain '2. Maruti Suzuki Dzire'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            output = program.execute("1");

            if (!output.contains("You rented 'Hyundai Venue'")) {
                return wrong("After renting 'Hyundai Venue' you shoul print 'You rented 'Hyundai Venue'");
            }

            db.checkCustomer("First customer", "Hyundai Venue");

            if (!output.contains("3. My rented car")) {
                return wrong("After renting a car you should print menu that contains '3. My rented car' option.");
            }

            output = program.execute("3");

            if (!output.contains("Hyundai Venue")) {
                return wrong("After choosing '3. My rented car' option expected car name is 'Hyundai Venue'");
            }

            if (!output.contains("Car To Go")) {
                return wrong("After choosing '3. My rented car' option expected company name is 'Car To Go'");
            }

            output = program.execute("1");

            if (!output.contains("You've already rented a car!")) {
                return wrong("If a customer has already rented a car and is trying to rent another one you should print 'You've already rented a car!'");
            }

            output = program.execute("2");

            if (!output.contains("You've returned a rented car!")) {
                return wrong("If a customer has already returned a rented car and is trying to return another one you should print 'You've returned a rented car!'");
            }

            db.checkCustomer("First customer", null);

            program.execute("0");
            program.execute("0");

            return correct();
        }

        @DynamicTest(order = 10)
        public CheckResult test10_testRentedCarInList() {

            TestedProgram program = new TestedProgram();
            String output;
            program.start("-databaseFileName", "carsharing");

            program.execute("2");
            program.execute("2");
            program.execute("1");
            program.execute("1");
            program.execute("1");
            program.execute("0");

            program.execute("2");
            program.execute("1");
            program.execute("1");

            output = program.execute("1");
            if (output.contains("Hyundai Venue")) {
                return wrong("You shouldn't print out a car if it is already rented!");
            }

            program.execute("0");
            program.execute("0");
            program.execute("0");

            return correct();
        }

        private CheckResult wrong(String message) {
            db.closeConnection();
            return CheckResult.wrong(message);
        }

        private CheckResult correct() {
            db.closeConnection();
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: test/DatabaseUtil.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.sql.*;
    import java.util.HashMap;

    public class DatabaseUtil {

        private Connection connection = null;
        private static final String databaseFilePath = "./src/carsharing/db/carsharing";

        public Connection getConnection() {
            if (connection != null) {
                return connection;
            }
            try {
                connection = DriverManager.getConnection("jdbc:h2:" + databaseFilePath);
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't connect to the database.");
            }
            return connection;
        }

        public void closeConnection() {
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException ignored) {
                    System.out.println(ignored.getErrorCode());
                    throw new WrongAnswer("Can't close connection to the database.");
                }
                connection = null;
            }
        }

        public ResultSet executeQuery(String query) {
            try {
                return getConnection().createStatement().executeQuery(query);
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public boolean ifTableExist(String tableName) {
            try {
                tableName = tableName.toUpperCase();
                ResultSet resultSet = executeQuery("SHOW TABLES");
                while (resultSet.next()) {
                    if (resultSet.getString("TABLE_NAME").equals(tableName)) {
                        return true;
                    }
                }
                return false;
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void ifColumnsExist(String tableName, String[][] columns) {
            try {
                ResultSet resultSet = getConnection()
                        .createStatement()
                        .executeQuery("SHOW COLUMNS FROM " + tableName.toUpperCase());

                HashMap<String, String> correctColumns = new HashMap<>();
                for (String[] column : columns) {
                    correctColumns.put(column[0], column[1]);
                }

                while (resultSet.next()) {
                    String columnName = resultSet.getString("FIELD");
                    if (correctColumns.containsKey(columnName)) {
                        if (!resultSet.getString("TYPE").contains(correctColumns.get(columnName))) {
                            throw new WrongAnswer("In the '" + tableName.toUpperCase() + "' table '" + columnName
                                    + "' column should be of " + correctColumns.get(columnName) + " type.");
                        }
                        correctColumns.remove(columnName);
                    }
                }
                if (!correctColumns.isEmpty()) {
                    throw new WrongAnswer("Can't find in '" + tableName.toUpperCase() + "' table the following columns: " + correctColumns.toString());
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void clearCompanyTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM COMPANY");
                getConnection().createStatement().execute("ALTER TABLE COMPANY ALTER COLUMN id RESTART WITH 1");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the COMPANY table.");
            }
        }

        public void clearCarTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM CAR");
                getConnection().createStatement().execute("ALTER TABLE CAR ALTER COLUMN id RESTART WITH 1");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the CAR table.");
            }
        }

        public void clearCustomerTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM CUSTOMER");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the CUSTOMER table.");
            }
        }

        public void checkCompany(String name) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                preparedStatement.setString(1, name);
                ResultSet resultSet = preparedStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + name + "' company in the 'COMPANY' table\n" +
                            "Make sure you don't clear the database after starting the program");
                }
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't select data from the 'COMPANY' table!");
            }
        }

        public void checkCar(String companyName, String carName) {
            try {
                PreparedStatement companyStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                companyStatement.setString(1, companyName);

                PreparedStatement carStatement = getConnection().prepareStatement("SELECT * FROM CAR WHERE NAME = ?");
                carStatement.setString(1, carName);

                ResultSet resultSet = companyStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + companyName + "' company in the 'COMPANY' table.");
                }

                int id = resultSet.getInt("ID");

                resultSet = carStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + carName + "' car in the 'CAR' table.\n" +
                            "Make sure you don't clear the database after starting the program");
                }
                if (resultSet.getInt("COMPANY_ID") != id) {
                    throw new WrongAnswer("'COMPANY_ID' of the '" + carName + "' car is wrong. It should reference to the '" + companyName + "' company ID.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCustomer(String name, String carName) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM CUSTOMER WHERE NAME = ?");
                preparedStatement.setString(1, name);
                ResultSet resultSet = preparedStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + name + "' customer in the 'CUSTOMER' table.\n" +
                            "Make sure you don't clear the database after starting the program");
                }

                if (carName == null) {
                    if (resultSet.getString("RENTED_CAR_ID") != null) {
                        throw new WrongAnswer("'RENTED_CAR_ID' of the '" + name + "' customer is wrong. It should be NULL");
                    }
                    return;
                }

                PreparedStatement carStatement = getConnection().prepareStatement("SELECT * FROM CAR WHERE NAME = ?");
                carStatement.setString(1, carName);
                ResultSet carResultSet = carStatement.executeQuery();

                if (!carResultSet.next()) {
                    throw new WrongAnswer("Can't find '" + carName + "' car in the 'CAR' table.\n" +
                            "Make sure you don't clear the database after starting the program");
                }

                int carId = carResultSet.getInt("ID");

                if (resultSet.getInt("RENTED_CAR_ID") != carId) {
                    throw new WrongAnswer("'RENTED_CAR_ID' of the '" + name + "' customer is wrong. It should reference to the '" + carName + "' car ID.");
                }
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't select data from the 'CAR' or 'CUSTOMER' tables!");
            }
        }


        public void checkCompanyColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'COMPANY' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'NAME' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'UNIQUE'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have UNIQUE constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'COMPANY' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have NOT NULL constraint.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCarColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'CAR' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'CAR' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'REFERENTIAL'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table is not FOREIGN KEY. It should refer to 'ID' column of the 'COMPANY' table.");
                }

                if (!resultSet.getString("SQL").replace("\"", "").contains("COMPANY(ID)")) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't refer to 'ID' column of the 'COMPANY' table.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCustomerColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'CUSTOMER' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'CUSTOMER' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'CUSTOMER' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'CUSTOMER' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'RENTED_CAR_ID' AND TABLE_NAME = 'CUSTOMER' AND IS_NULLABLE = 'YES'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table has NOT NULL constraint, but it shouldn't");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'RENTED_CAR_ID' AND TABLE_NAME = 'CUSTOMER' AND CONSTRAINT_TYPE = 'REFERENTIAL'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table is not FOREIGN KEY. It should refer to 'ID' column of the 'CAR' table.");
                }

                if (!resultSet.getString("SQL").replace("\"", "").contains("CAR(ID)")) {
                    throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table doesn't refer to 'ID' column of the 'CAR' table.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }
    }
  learner_created: false
- name: src/carsharing/db/dao/DbClient.java
  visible: true
  text: |
    package carsharing.db.dao;

    import carsharing.db.entity.Car;
    import carsharing.db.entity.Company;

    import java.sql.*;
    import java.util.ArrayList;
    import java.util.List;

    public class DbClient {
        private final String url;

        public DbClient(String url) {
            try {
                Class.forName("org.h2.Driver");
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            }
            this.url = url;
        }

        public void run(String query) {
            try(Connection conn = DriverManager.getConnection(url);
                Statement statement = conn.createStatement()) {
                conn.setAutoCommit(true);
                statement.executeUpdate(query);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        public List<Company> selectForList(String query) {
            List<Company> companies = new ArrayList<>();
            try (Connection conn = DriverManager.getConnection(url);
                Statement statement = conn.createStatement();
                ResultSet resultSet = statement.executeQuery(query)) {
                conn.setAutoCommit(true);
                while (resultSet.next()) {
                    Company company = new Company(resultSet.getInt("ID"), resultSet.getString("NAME"));
                    try (Statement carStatement = conn.createStatement();
                         ResultSet carSet = carStatement.executeQuery("select * from CAR where COMPANY_ID = " + company.getId())) {
                        while (carSet.next()) {
                            company.addCar(new Car(carSet.getInt("ID"),carSet.getString("NAME"), company));
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    companies.add(company);
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return companies;
        }
    }
  learner_created: true
- name: src/carsharing/db/entity/Company.java
  visible: true
  text: |
    package carsharing.db.entity;

    import java.util.ArrayList;
    import java.util.List;

    public class Company {
        private int id;
        private String name;
        private List<Car> cars;

        public Company(int id, String name) {
            this.id = id;
            this.name = name;
            cars = new ArrayList<>();
        }


        public Company(String name) {
            this.name = name;
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public List<Car> getCars() {
            return cars;
        }

        public void setCars(List<Car> cars) {
            this.cars = cars;
        }

        public void addCar(Car car) {
            cars.add(car);
        }

        @Override
        public String toString() {
            return String.format("%d. %s", id, name);
        }
    }
  learner_created: true
- name: src/carsharing/db/entity/Car.java
  visible: true
  text: |
    package carsharing.db.entity;

    public class Car {
        private int id;
        private String name;
        private Company company;

        public Car(int id, String name, Company company) {
            this.id = id;
            this.name = name;
            this.company = company;
        }

        public Car(String name) {
            this.name = name;
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public Company getCompany() {
            return company;
        }

        public void setCompany(Company company) {
            this.company = company;
        }
    }
  learner_created: true
- name: src/carsharing/db/dao/CompanyDaoImpl.java
  visible: true
  text: |
    package carsharing.db.dao;

    import carsharing.db.entity.Car;
    import carsharing.db.entity.Company;

    import java.util.List;

    public class CompanyDaoImpl implements CompanyDao {
        private static final String CONNECTION_URL = "jdbc:h2:./src/carsharing/db/";
        private static final String CREATE_TABLE_COMPANY = "create table if not exists COMPANY (" +
                "ID int auto_increment primary key," +
                "NAME varchar(20) not null unique)";
        private static final String CREATE_TABLE_CAR = "create table if not exists CAR (" +
                "ID int auto_increment primary key," +
                "NAME varchar(20) not null unique," +
                "COMPANY_ID int not null," +
                "constraint FK_COMPANY foreign key(COMPANY_ID)" +
                "references COMPANY(ID))";
        private static final String SELECT_ALL = "select * from COMPANY";
        private static final String INSERT_DATA_TO_COMPANY = "insert into COMPANY (NAME) values ('%s')";
        private static final String INSERT_DATA_TO_CAR = "insert into CAR (NAME, COMPANY_ID) values ('%s', %d)";
        private static final String ID_RESTART = "alter table COMPANY alter column ID restart with 1";
        private final DbClient dbClient;

        public CompanyDaoImpl(String dbName) {
            dbClient = new DbClient(CONNECTION_URL + dbName);
            dbClient.run(CREATE_TABLE_COMPANY);
            dbClient.run(ID_RESTART);
            dbClient.run(CREATE_TABLE_CAR);
        }

        @Override
        public List<Company> findAll() {
            return dbClient.selectForList(SELECT_ALL);
        }

        @Override
        public void add(Company company) {
            dbClient.run(String.format(INSERT_DATA_TO_COMPANY, company.getName()));
        }

        @Override
        public void addCarToCompany(Company company, Car car) {
            company.addCar(car);
            dbClient.run(String.format(INSERT_DATA_TO_CAR, car.getName(), company.getId()));
        }
    }
  learner_created: true
- name: src/carsharing/db/dao/CompanyDao.java
  visible: true
  text: |
    package carsharing.db.dao;

    import carsharing.db.entity.Car;
    import carsharing.db.entity.Company;

    import java.util.List;

    public interface CompanyDao {
        List<Company> findAll();
        void add(Company company);
        void addCarToCompany(Company company, Car car);
    }
  learner_created: true
- name: src/carsharing/db/carsharing.trace.db
  visible: true
  text: "2023-10-20 18:24:59 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Table \"COMPANY\" already exists; SQL statement:\ncreate table COMPANY(ID integer,NAME\
    \ varchar(20)) [42101-200]\n2023-10-20 18:26:55 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Table \"COMPANY\" already exists; SQL statement:\ncreate table COMPANY (ID integer,NAME\
    \ varchar(20)) [42101-200]\n2023-10-20 18:36:05 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Syntax error in SQL statement \"DROP TABLE IF EXIST[*] COMPANY\"; expected \"\
    EXISTS\"; SQL statement:\ndrop table if exist COMPANY [42001-200]\n2023-10-20\
    \ 18:37:31 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax\
    \ error in SQL statement \"DROP TABLE IF EXIST[*] COMPANY PUBLIC\"; expected \"\
    EXISTS\"; SQL statement:\ndrop table if exist COMPANY PUBLIC [42001-200]\n2023-10-20\
    \ 18:38:07 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax\
    \ error in SQL statement \"DROP TABLE IF EXIST[*] COMPANY PUBLIC\"; expected \"\
    EXISTS\"; SQL statement:\ndrop table if exist COMPANY PUBLIC [42001-200]\n2023-10-20\
    \ 18:40:57 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax\
    \ error in SQL statement \"DROP TABLE IF EXIST[*] COMPANY.PUBLIC\"; expected \"\
    EXISTS\"; SQL statement:\ndrop table if exist COMPANY.PUBLIC [42001-200]\n2023-10-20\
    \ 18:45:07 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax\
    \ error in SQL statement \"DROP TABLE IF EXIST[*] PUBLIC.COMPANY\"; expected \"\
    EXISTS\"; SQL statement:\ndrop table if exist PUBLIC.COMPANY [42001-200]\n2023-10-24\
    \ 16:45:26 jdbc[5]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException: Column\
    \ count does not match; SQL statement:\ninsert into COMPANY (NAME) values () [21002-200]\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:453)\n\t\
    at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\tat\
    \ org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.message.DbException.get(DbException.java:170)\n\tat org.h2.command.dml.Insert.prepare(Insert.java:319)\n\
    \tat org.h2.command.Parser.prepareCommand(Parser.java:744)\n\tat org.h2.engine.Session.prepareLocal(Session.java:657)\n\
    \tat org.h2.engine.Session.prepareCommand(Session.java:595)\n\tat org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdateInternal(JdbcStatement.java:164)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdate(JdbcStatement.java:126)\n\tat carsharing.db.dao.DbClient.run(DbClient.java:25)\n\
    \tat carsharing.db.dao.CompanyDaoImpl.add(CompanyDaoImpl.java:28)\n\tat carsharing.Main.toManagerMenu(Main.java:54)\n\
    \tat carsharing.Main.toManagerMenu(Main.java:50)\n\tat carsharing.Main.toMainMenu(Main.java:27)\n\
    \tat carsharing.Main.main(Main.java:19)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\n2023-10-24 17:06:11 jdbc[5]:\
    \ exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement\
    \ \"INSERT INTO COMPANY (NAME) VALUES (SUPER COMPANY[*])\"; expected \"(, ., [,\
    \ ::, AT, FORMAT, *, /, %, +, -, ||, ~, !~, NOT, LIKE, ILIKE, REGEXP, IS, IN,\
    \ BETWEEN, AND, OR, ,, )\"; SQL statement:\ninsert into COMPANY (NAME) values\
    \ (Super company) [42001-200]\n2023-10-26 13:09:30 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLNonTransientException:\
    \ Unknown data type: \"NOT\"; SQL statement:\ncreate table if not exists CAR (ID\
    \ int auto_increment primary key,NAME varchar(20) not null unique,COMPANY_ID not\
    \ null,constraint FK_COMPANY foreign key(COMPANY_ID)references COMPANY(ID) [50004-200]\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n\t\
    at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\tat\
    \ org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.command.Parser.parseColumnWithType(Parser.java:5971)\n\tat org.h2.command.Parser.parseColumnForTable(Parser.java:5697)\n\
    \tat org.h2.command.Parser.parseTableColumnDefinition(Parser.java:8442)\n\tat\
    \ org.h2.command.Parser.parseCreateTable(Parser.java:8379)\n\tat org.h2.command.Parser.parseCreate(Parser.java:6276)\n\
    \tat org.h2.command.Parser.parsePrepared(Parser.java:903)\n\tat org.h2.command.Parser.parse(Parser.java:843)\n\
    \tat org.h2.command.Parser.parse(Parser.java:815)\n\tat org.h2.command.Parser.prepareCommand(Parser.java:738)\n\
    \tat org.h2.engine.Session.prepareLocal(Session.java:657)\n\tat org.h2.engine.Session.prepareCommand(Session.java:595)\n\
    \tat org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)\n\tat\
    \ org.h2.jdbc.JdbcStatement.executeUpdateInternal(JdbcStatement.java:164)\n\t\
    at org.h2.jdbc.JdbcStatement.executeUpdate(JdbcStatement.java:126)\n\tat carsharing.db.dao.DbClient.run(DbClient.java:26)\n\
    \tat carsharing.db.dao.CompanyDaoImpl.<init>(CompanyDaoImpl.java:29)\n\tat carsharing.Main.main(Main.java:25)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\n2023-10-26 13:09:31 jdbc[3]:\
    \ exception\norg.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: \"NOT\"\
    ; SQL statement:\ncreate table if not exists CAR (ID int auto_increment primary\
    \ key,NAME varchar(20) not null unique,COMPANY_ID not null,constraint FK_COMPANY\
    \ foreign key(COMPANY_ID)references COMPANY(ID) [50004-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.command.Parser.parseColumnWithType(Parser.java:5971)\n\tat org.h2.command.Parser.parseColumnForTable(Parser.java:5697)\n\
    \tat org.h2.command.Parser.parseTableColumnDefinition(Parser.java:8442)\n\tat\
    \ org.h2.command.Parser.parseCreateTable(Parser.java:8379)\n\tat org.h2.command.Parser.parseCreate(Parser.java:6276)\n\
    \tat org.h2.command.Parser.parsePrepared(Parser.java:903)\n\tat org.h2.command.Parser.parse(Parser.java:843)\n\
    \tat org.h2.command.Parser.parse(Parser.java:815)\n\tat org.h2.command.Parser.prepareCommand(Parser.java:738)\n\
    \tat org.h2.engine.Session.prepareLocal(Session.java:657)\n\tat org.h2.engine.Session.prepareCommand(Session.java:595)\n\
    \tat org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)\n\tat\
    \ org.h2.jdbc.JdbcStatement.executeUpdateInternal(JdbcStatement.java:164)\n\t\
    at org.h2.jdbc.JdbcStatement.executeUpdate(JdbcStatement.java:126)\n\tat carsharing.db.dao.DbClient.run(DbClient.java:26)\n\
    \tat carsharing.db.dao.CompanyDaoImpl.<init>(CompanyDaoImpl.java:29)\n\tat carsharing.Main.main(Main.java:25)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\n2023-10-26 13:11:36 jdbc[3]:\
    \ exception\norg.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: \"NOT\"\
    ; SQL statement:\ncreate table if not exists car (ID int auto_increment primary\
    \ key,NAME varchar(20) not null unique,COMPANY_ID not null,constraint FK_COMPANY\
    \ foreign key(COMPANY_ID)references COMPANY(ID) [50004-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.command.Parser.parseColumnWithType(Parser.java:5971)\n\tat org.h2.command.Parser.parseColumnForTable(Parser.java:5697)\n\
    \tat org.h2.command.Parser.parseTableColumnDefinition(Parser.java:8442)\n\tat\
    \ org.h2.command.Parser.parseCreateTable(Parser.java:8379)\n\tat org.h2.command.Parser.parseCreate(Parser.java:6276)\n\
    \tat org.h2.command.Parser.parsePrepared(Parser.java:903)\n\tat org.h2.command.Parser.parse(Parser.java:843)\n\
    \tat org.h2.command.Parser.parse(Parser.java:815)\n\tat org.h2.command.Parser.prepareCommand(Parser.java:738)\n\
    \tat org.h2.engine.Session.prepareLocal(Session.java:657)\n\tat org.h2.engine.Session.prepareCommand(Session.java:595)\n\
    \tat org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)\n\tat\
    \ org.h2.jdbc.JdbcStatement.executeUpdateInternal(JdbcStatement.java:164)\n\t\
    at org.h2.jdbc.JdbcStatement.executeUpdate(JdbcStatement.java:126)\n\tat carsharing.db.dao.DbClient.run(DbClient.java:26)\n\
    \tat carsharing.db.dao.CompanyDaoImpl.<init>(CompanyDaoImpl.java:29)\n\tat carsharing.Main.main(Main.java:25)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\n2023-10-26 13:11:36 jdbc[3]:\
    \ exception\norg.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: \"NOT\"\
    ; SQL statement:\ncreate table if not exists car (ID int auto_increment primary\
    \ key,NAME varchar(20) not null unique,COMPANY_ID not null,constraint FK_COMPANY\
    \ foreign key(COMPANY_ID)references COMPANY(ID) [50004-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.command.Parser.parseColumnWithType(Parser.java:5971)\n\tat org.h2.command.Parser.parseColumnForTable(Parser.java:5697)\n\
    \tat org.h2.command.Parser.parseTableColumnDefinition(Parser.java:8442)\n\tat\
    \ org.h2.command.Parser.parseCreateTable(Parser.java:8379)\n\tat org.h2.command.Parser.parseCreate(Parser.java:6276)\n\
    \tat org.h2.command.Parser.parsePrepared(Parser.java:903)\n\tat org.h2.command.Parser.parse(Parser.java:843)\n\
    \tat org.h2.command.Parser.parse(Parser.java:815)\n\tat org.h2.command.Parser.prepareCommand(Parser.java:738)\n\
    \tat org.h2.engine.Session.prepareLocal(Session.java:657)\n\tat org.h2.engine.Session.prepareCommand(Session.java:595)\n\
    \tat org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)\n\tat\
    \ org.h2.jdbc.JdbcStatement.executeUpdateInternal(JdbcStatement.java:164)\n\t\
    at org.h2.jdbc.JdbcStatement.executeUpdate(JdbcStatement.java:126)\n\tat carsharing.db.dao.DbClient.run(DbClient.java:26)\n\
    \tat carsharing.db.dao.CompanyDaoImpl.<init>(CompanyDaoImpl.java:29)\n\tat carsharing.Main.main(Main.java:25)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\n2023-10-26 13:33:46 jdbc[3]:\
    \ exception\norg.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: \"NOT\"\
    ; SQL statement:\n create table if not exists CAR (ID int auto_increment primary\
    \ key,NAME varchar(20) not null unique,COMPANY_ID not null,constraint FK_COMPANY\
    \ foreign key(COMPANY_ID)references COMPANY(ID) [50004-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.command.Parser.parseColumnWithType(Parser.java:5971)\n\tat org.h2.command.Parser.parseColumnForTable(Parser.java:5697)\n\
    \tat org.h2.command.Parser.parseTableColumnDefinition(Parser.java:8442)\n\tat\
    \ org.h2.command.Parser.parseCreateTable(Parser.java:8379)\n\tat org.h2.command.Parser.parseCreate(Parser.java:6276)\n\
    \tat org.h2.command.Parser.parsePrepared(Parser.java:903)\n\tat org.h2.command.Parser.parse(Parser.java:843)\n\
    \tat org.h2.command.Parser.parse(Parser.java:815)\n\tat org.h2.command.Parser.prepareCommand(Parser.java:738)\n\
    \tat org.h2.engine.Session.prepareLocal(Session.java:657)\n\tat org.h2.command.CommandList.executeRemaining(CommandList.java:54)\n\
    \tat org.h2.command.CommandList.update(CommandList.java:67)\n\tat org.h2.command.Command.executeUpdate(Command.java:251)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdateInternal(JdbcStatement.java:168)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdate(JdbcStatement.java:126)\n\tat carsharing.db.dao.DbClient.run(DbClient.java:26)\n\
    \tat carsharing.db.dao.CompanyDaoImpl.<init>(CompanyDaoImpl.java:27)\n\tat carsharing.Main.main(Main.java:25)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\n2023-10-26 13:33:46 jdbc[3]:\
    \ exception\norg.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: \"NOT\"\
    ; SQL statement:\n create table if not exists CAR (ID int auto_increment primary\
    \ key,NAME varchar(20) not null unique,COMPANY_ID not null,constraint FK_COMPANY\
    \ foreign key(COMPANY_ID)references COMPANY(ID) [50004-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.command.Parser.parseColumnWithType(Parser.java:5971)\n\tat org.h2.command.Parser.parseColumnForTable(Parser.java:5697)\n\
    \tat org.h2.command.Parser.parseTableColumnDefinition(Parser.java:8442)\n\tat\
    \ org.h2.command.Parser.parseCreateTable(Parser.java:8379)\n\tat org.h2.command.Parser.parseCreate(Parser.java:6276)\n\
    \tat org.h2.command.Parser.parsePrepared(Parser.java:903)\n\tat org.h2.command.Parser.parse(Parser.java:843)\n\
    \tat org.h2.command.Parser.parse(Parser.java:815)\n\tat org.h2.command.Parser.prepareCommand(Parser.java:738)\n\
    \tat org.h2.engine.Session.prepareLocal(Session.java:657)\n\tat org.h2.command.CommandList.executeRemaining(CommandList.java:54)\n\
    \tat org.h2.command.CommandList.update(CommandList.java:67)\n\tat org.h2.command.Command.executeUpdate(Command.java:251)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdateInternal(JdbcStatement.java:168)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdate(JdbcStatement.java:126)\n\tat carsharing.db.dao.DbClient.run(DbClient.java:26)\n\
    \tat carsharing.db.dao.CompanyDaoImpl.<init>(CompanyDaoImpl.java:27)\n\tat carsharing.Main.main(Main.java:25)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\n2023-10-26 13:36:56 jdbc[3]:\
    \ exception\norg.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: \"NOT\"\
    ; SQL statement:\n create table if not exists CAR (ID int auto_increment primary\
    \ key,NAME varchar(20) not null unique,COMPANY_ID not null,constraint FK_COMPANY\
    \ foreign key(COMPANY_ID)references COMPANY(ID); [50004-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.command.Parser.parseColumnWithType(Parser.java:5971)\n\tat org.h2.command.Parser.parseColumnForTable(Parser.java:5697)\n\
    \tat org.h2.command.Parser.parseTableColumnDefinition(Parser.java:8442)\n\tat\
    \ org.h2.command.Parser.parseCreateTable(Parser.java:8379)\n\tat org.h2.command.Parser.parseCreate(Parser.java:6276)\n\
    \tat org.h2.command.Parser.parsePrepared(Parser.java:903)\n\tat org.h2.command.Parser.parse(Parser.java:843)\n\
    \tat org.h2.command.Parser.parse(Parser.java:815)\n\tat org.h2.command.Parser.prepareCommand(Parser.java:738)\n\
    \tat org.h2.engine.Session.prepareLocal(Session.java:657)\n\tat org.h2.command.CommandList.executeRemaining(CommandList.java:54)\n\
    \tat org.h2.command.CommandList.update(CommandList.java:67)\n\tat org.h2.command.Command.executeUpdate(Command.java:251)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdateInternal(JdbcStatement.java:168)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdate(JdbcStatement.java:126)\n\tat carsharing.db.dao.DbClient.run(DbClient.java:26)\n\
    \tat carsharing.db.dao.CompanyDaoImpl.<init>(CompanyDaoImpl.java:27)\n\tat carsharing.Main.main(Main.java:25)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\n2023-10-26 13:36:56 jdbc[3]:\
    \ exception\norg.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: \"NOT\"\
    ; SQL statement:\n create table if not exists CAR (ID int auto_increment primary\
    \ key,NAME varchar(20) not null unique,COMPANY_ID not null,constraint FK_COMPANY\
    \ foreign key(COMPANY_ID)references COMPANY(ID); [50004-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.command.Parser.parseColumnWithType(Parser.java:5971)\n\tat org.h2.command.Parser.parseColumnForTable(Parser.java:5697)\n\
    \tat org.h2.command.Parser.parseTableColumnDefinition(Parser.java:8442)\n\tat\
    \ org.h2.command.Parser.parseCreateTable(Parser.java:8379)\n\tat org.h2.command.Parser.parseCreate(Parser.java:6276)\n\
    \tat org.h2.command.Parser.parsePrepared(Parser.java:903)\n\tat org.h2.command.Parser.parse(Parser.java:843)\n\
    \tat org.h2.command.Parser.parse(Parser.java:815)\n\tat org.h2.command.Parser.prepareCommand(Parser.java:738)\n\
    \tat org.h2.engine.Session.prepareLocal(Session.java:657)\n\tat org.h2.command.CommandList.executeRemaining(CommandList.java:54)\n\
    \tat org.h2.command.CommandList.update(CommandList.java:67)\n\tat org.h2.command.Command.executeUpdate(Command.java:251)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdateInternal(JdbcStatement.java:168)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdate(JdbcStatement.java:126)\n\tat carsharing.db.dao.DbClient.run(DbClient.java:26)\n\
    \tat carsharing.db.dao.CompanyDaoImpl.<init>(CompanyDaoImpl.java:27)\n\tat carsharing.Main.main(Main.java:25)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\n2023-10-26 13:38:43 jdbc[3]:\
    \ exception\norg.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: \"NOT\"\
    ; SQL statement:\n create table if not exists car (ID int auto_increment primary\
    \ key,NAME varchar(20) not null unique,COMPANY_ID not null,constraint FK_COMPANY\
    \ foreign key(COMPANY_ID)references COMPANY(ID); [50004-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.command.Parser.parseColumnWithType(Parser.java:5971)\n\tat org.h2.command.Parser.parseColumnForTable(Parser.java:5697)\n\
    \tat org.h2.command.Parser.parseTableColumnDefinition(Parser.java:8442)\n\tat\
    \ org.h2.command.Parser.parseCreateTable(Parser.java:8379)\n\tat org.h2.command.Parser.parseCreate(Parser.java:6276)\n\
    \tat org.h2.command.Parser.parsePrepared(Parser.java:903)\n\tat org.h2.command.Parser.parse(Parser.java:843)\n\
    \tat org.h2.command.Parser.parse(Parser.java:815)\n\tat org.h2.command.Parser.prepareCommand(Parser.java:738)\n\
    \tat org.h2.engine.Session.prepareLocal(Session.java:657)\n\tat org.h2.command.CommandList.executeRemaining(CommandList.java:54)\n\
    \tat org.h2.command.CommandList.update(CommandList.java:67)\n\tat org.h2.command.Command.executeUpdate(Command.java:251)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdateInternal(JdbcStatement.java:168)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdate(JdbcStatement.java:126)\n\tat carsharing.db.dao.DbClient.run(DbClient.java:26)\n\
    \tat carsharing.db.dao.CompanyDaoImpl.<init>(CompanyDaoImpl.java:27)\n\tat carsharing.Main.main(Main.java:25)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\n2023-10-26 13:38:43 jdbc[3]:\
    \ exception\norg.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: \"NOT\"\
    ; SQL statement:\n create table if not exists car (ID int auto_increment primary\
    \ key,NAME varchar(20) not null unique,COMPANY_ID not null,constraint FK_COMPANY\
    \ foreign key(COMPANY_ID)references COMPANY(ID); [50004-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.command.Parser.parseColumnWithType(Parser.java:5971)\n\tat org.h2.command.Parser.parseColumnForTable(Parser.java:5697)\n\
    \tat org.h2.command.Parser.parseTableColumnDefinition(Parser.java:8442)\n\tat\
    \ org.h2.command.Parser.parseCreateTable(Parser.java:8379)\n\tat org.h2.command.Parser.parseCreate(Parser.java:6276)\n\
    \tat org.h2.command.Parser.parsePrepared(Parser.java:903)\n\tat org.h2.command.Parser.parse(Parser.java:843)\n\
    \tat org.h2.command.Parser.parse(Parser.java:815)\n\tat org.h2.command.Parser.prepareCommand(Parser.java:738)\n\
    \tat org.h2.engine.Session.prepareLocal(Session.java:657)\n\tat org.h2.command.CommandList.executeRemaining(CommandList.java:54)\n\
    \tat org.h2.command.CommandList.update(CommandList.java:67)\n\tat org.h2.command.Command.executeUpdate(Command.java:251)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdateInternal(JdbcStatement.java:168)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdate(JdbcStatement.java:126)\n\tat carsharing.db.dao.DbClient.run(DbClient.java:26)\n\
    \tat carsharing.db.dao.CompanyDaoImpl.<init>(CompanyDaoImpl.java:27)\n\tat carsharing.Main.main(Main.java:25)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\n2023-10-26 13:44:31 jdbc[3]:\
    \ exception\norg.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: \"NOT\"\
    ; SQL statement:\ncreate table if not exists CAR (ID int auto_increment primary\
    \ key,NAME varchar(20) not null unique,COMPANY_ID not null,constraint FK_COMPANY\
    \ foreign key(COMPANY_ID)references COMPANY(ID)) [50004-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.command.Parser.parseColumnWithType(Parser.java:5971)\n\tat org.h2.command.Parser.parseColumnForTable(Parser.java:5697)\n\
    \tat org.h2.command.Parser.parseTableColumnDefinition(Parser.java:8442)\n\tat\
    \ org.h2.command.Parser.parseCreateTable(Parser.java:8379)\n\tat org.h2.command.Parser.parseCreate(Parser.java:6276)\n\
    \tat org.h2.command.Parser.parsePrepared(Parser.java:903)\n\tat org.h2.command.Parser.parse(Parser.java:843)\n\
    \tat org.h2.command.Parser.parse(Parser.java:815)\n\tat org.h2.command.Parser.prepareCommand(Parser.java:738)\n\
    \tat org.h2.engine.Session.prepareLocal(Session.java:657)\n\tat org.h2.engine.Session.prepareCommand(Session.java:595)\n\
    \tat org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)\n\tat\
    \ org.h2.jdbc.JdbcStatement.executeUpdateInternal(JdbcStatement.java:164)\n\t\
    at org.h2.jdbc.JdbcStatement.executeUpdate(JdbcStatement.java:126)\n\tat carsharing.db.dao.DbClient.run(DbClient.java:26)\n\
    \tat carsharing.db.dao.CompanyDaoImpl.<init>(CompanyDaoImpl.java:29)\n\tat carsharing.Main.main(Main.java:25)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\n2023-10-26 13:44:32 jdbc[3]:\
    \ exception\norg.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: \"NOT\"\
    ; SQL statement:\ncreate table if not exists CAR (ID int auto_increment primary\
    \ key,NAME varchar(20) not null unique,COMPANY_ID not null,constraint FK_COMPANY\
    \ foreign key(COMPANY_ID)references COMPANY(ID)) [50004-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.command.Parser.parseColumnWithType(Parser.java:5971)\n\tat org.h2.command.Parser.parseColumnForTable(Parser.java:5697)\n\
    \tat org.h2.command.Parser.parseTableColumnDefinition(Parser.java:8442)\n\tat\
    \ org.h2.command.Parser.parseCreateTable(Parser.java:8379)\n\tat org.h2.command.Parser.parseCreate(Parser.java:6276)\n\
    \tat org.h2.command.Parser.parsePrepared(Parser.java:903)\n\tat org.h2.command.Parser.parse(Parser.java:843)\n\
    \tat org.h2.command.Parser.parse(Parser.java:815)\n\tat org.h2.command.Parser.prepareCommand(Parser.java:738)\n\
    \tat org.h2.engine.Session.prepareLocal(Session.java:657)\n\tat org.h2.engine.Session.prepareCommand(Session.java:595)\n\
    \tat org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)\n\tat\
    \ org.h2.jdbc.JdbcStatement.executeUpdateInternal(JdbcStatement.java:164)\n\t\
    at org.h2.jdbc.JdbcStatement.executeUpdate(JdbcStatement.java:126)\n\tat carsharing.db.dao.DbClient.run(DbClient.java:26)\n\
    \tat carsharing.db.dao.CompanyDaoImpl.<init>(CompanyDaoImpl.java:29)\n\tat carsharing.Main.main(Main.java:25)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\n2023-10-26 13:44:59 jdbc[3]:\
    \ exception\norg.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: \"NOT\"\
    ; SQL statement:\ncreate table if not exists car (ID int auto_increment primary\
    \ key,NAME varchar(20) not null unique,COMPANY_ID not null,constraint FK_COMPANY\
    \ foreign key(COMPANY_ID)references COMPANY(ID)) [50004-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.command.Parser.parseColumnWithType(Parser.java:5971)\n\tat org.h2.command.Parser.parseColumnForTable(Parser.java:5697)\n\
    \tat org.h2.command.Parser.parseTableColumnDefinition(Parser.java:8442)\n\tat\
    \ org.h2.command.Parser.parseCreateTable(Parser.java:8379)\n\tat org.h2.command.Parser.parseCreate(Parser.java:6276)\n\
    \tat org.h2.command.Parser.parsePrepared(Parser.java:903)\n\tat org.h2.command.Parser.parse(Parser.java:843)\n\
    \tat org.h2.command.Parser.parse(Parser.java:815)\n\tat org.h2.command.Parser.prepareCommand(Parser.java:738)\n\
    \tat org.h2.engine.Session.prepareLocal(Session.java:657)\n\tat org.h2.engine.Session.prepareCommand(Session.java:595)\n\
    \tat org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)\n\tat\
    \ org.h2.jdbc.JdbcStatement.executeUpdateInternal(JdbcStatement.java:164)\n\t\
    at org.h2.jdbc.JdbcStatement.executeUpdate(JdbcStatement.java:126)\n\tat carsharing.db.dao.DbClient.run(DbClient.java:26)\n\
    \tat carsharing.db.dao.CompanyDaoImpl.<init>(CompanyDaoImpl.java:29)\n\tat carsharing.Main.main(Main.java:25)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\n2023-10-26 13:44:59 jdbc[3]:\
    \ exception\norg.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: \"NOT\"\
    ; SQL statement:\ncreate table if not exists car (ID int auto_increment primary\
    \ key,NAME varchar(20) not null unique,COMPANY_ID not null,constraint FK_COMPANY\
    \ foreign key(COMPANY_ID)references COMPANY(ID)) [50004-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.command.Parser.parseColumnWithType(Parser.java:5971)\n\tat org.h2.command.Parser.parseColumnForTable(Parser.java:5697)\n\
    \tat org.h2.command.Parser.parseTableColumnDefinition(Parser.java:8442)\n\tat\
    \ org.h2.command.Parser.parseCreateTable(Parser.java:8379)\n\tat org.h2.command.Parser.parseCreate(Parser.java:6276)\n\
    \tat org.h2.command.Parser.parsePrepared(Parser.java:903)\n\tat org.h2.command.Parser.parse(Parser.java:843)\n\
    \tat org.h2.command.Parser.parse(Parser.java:815)\n\tat org.h2.command.Parser.prepareCommand(Parser.java:738)\n\
    \tat org.h2.engine.Session.prepareLocal(Session.java:657)\n\tat org.h2.engine.Session.prepareCommand(Session.java:595)\n\
    \tat org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)\n\tat\
    \ org.h2.jdbc.JdbcStatement.executeUpdateInternal(JdbcStatement.java:164)\n\t\
    at org.h2.jdbc.JdbcStatement.executeUpdate(JdbcStatement.java:126)\n\tat carsharing.db.dao.DbClient.run(DbClient.java:26)\n\
    \tat carsharing.db.dao.CompanyDaoImpl.<init>(CompanyDaoImpl.java:29)\n\tat carsharing.Main.main(Main.java:25)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\n2023-10-26 13:45:47 jdbc[3]:\
    \ exception\norg.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: \"NOT\"\
    ; SQL statement:\ncreate table if not exists car (ID int auto_increment primary\
    \ key,NAME varchar(20) not null unique,COMPANY_ID not null,constraint FK_COMPANY\
    \ foreign key(COMPANY_ID)references COMPANY(ID)); [50004-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.command.Parser.parseColumnWithType(Parser.java:5971)\n\tat org.h2.command.Parser.parseColumnForTable(Parser.java:5697)\n\
    \tat org.h2.command.Parser.parseTableColumnDefinition(Parser.java:8442)\n\tat\
    \ org.h2.command.Parser.parseCreateTable(Parser.java:8379)\n\tat org.h2.command.Parser.parseCreate(Parser.java:6276)\n\
    \tat org.h2.command.Parser.parsePrepared(Parser.java:903)\n\tat org.h2.command.Parser.parse(Parser.java:843)\n\
    \tat org.h2.command.Parser.parse(Parser.java:815)\n\tat org.h2.command.Parser.prepareCommand(Parser.java:738)\n\
    \tat org.h2.engine.Session.prepareLocal(Session.java:657)\n\tat org.h2.command.CommandList.executeRemaining(CommandList.java:54)\n\
    \tat org.h2.command.CommandList.update(CommandList.java:67)\n\tat org.h2.command.Command.executeUpdate(Command.java:251)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdateInternal(JdbcStatement.java:168)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdate(JdbcStatement.java:126)\n\tat carsharing.db.dao.DbClient.run(DbClient.java:26)\n\
    \tat carsharing.db.dao.CompanyDaoImpl.<init>(CompanyDaoImpl.java:27)\n\tat carsharing.Main.main(Main.java:25)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\n2023-10-26 13:45:47 jdbc[3]:\
    \ exception\norg.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: \"NOT\"\
    ; SQL statement:\ncreate table if not exists car (ID int auto_increment primary\
    \ key,NAME varchar(20) not null unique,COMPANY_ID not null,constraint FK_COMPANY\
    \ foreign key(COMPANY_ID)references COMPANY(ID)); [50004-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.command.Parser.parseColumnWithType(Parser.java:5971)\n\tat org.h2.command.Parser.parseColumnForTable(Parser.java:5697)\n\
    \tat org.h2.command.Parser.parseTableColumnDefinition(Parser.java:8442)\n\tat\
    \ org.h2.command.Parser.parseCreateTable(Parser.java:8379)\n\tat org.h2.command.Parser.parseCreate(Parser.java:6276)\n\
    \tat org.h2.command.Parser.parsePrepared(Parser.java:903)\n\tat org.h2.command.Parser.parse(Parser.java:843)\n\
    \tat org.h2.command.Parser.parse(Parser.java:815)\n\tat org.h2.command.Parser.prepareCommand(Parser.java:738)\n\
    \tat org.h2.engine.Session.prepareLocal(Session.java:657)\n\tat org.h2.command.CommandList.executeRemaining(CommandList.java:54)\n\
    \tat org.h2.command.CommandList.update(CommandList.java:67)\n\tat org.h2.command.Command.executeUpdate(Command.java:251)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdateInternal(JdbcStatement.java:168)\n\
    \tat org.h2.jdbc.JdbcStatement.executeUpdate(JdbcStatement.java:126)\n\tat carsharing.db.dao.DbClient.run(DbClient.java:26)\n\
    \tat carsharing.db.dao.CompanyDaoImpl.<init>(CompanyDaoImpl.java:27)\n\tat carsharing.Main.main(Main.java:25)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\n2023-10-26 13:47:28 jdbc[6]:\
    \ exception\norg.h2.jdbc.JdbcSQLNonTransientException: The object is already closed\
    \ [90007-200]\n2023-10-26 13:47:28 jdbc[9]: exception\norg.h2.jdbc.JdbcSQLNonTransientException:\
    \ The object is already closed [90007-200]\n"
  learner_created: true
- name: src/carsharing/db/entity/Customer.java
  visible: true
  learner_created: true
- name: src/carsharing/db/entity/Entity.java
  visible: true
  learner_created: true
- name: src/carsharing/db/dao/CustomerDao.java
  visible: true
  learner_created: true
- name: src/carsharing/db/dao/CustomerDaoImpl.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11504#comment
status: Failed
feedback:
  message: |-
    Error in test #10

    The program Main has unexpectedly terminated.
    It finished execution too early, should continue running.

    Please find below the output of your program during this failed test.
    Note that the &#39;&gt;&#39; character indicates the beginning of the input line.

    ---

    Arguments: -databaseFileName carsharing

    1. Log in as a manager
    2. Log in as a customer
    3. Create a customer
    0. Exit
    &gt; 2
    Customer list:
    1. First customer
    2. Second customer
    0. Back
    &gt; 2
    1. Rent a car
    2. Return a rented car
    3. My rented car
    0. Back
    &gt; 1
    Choose a company:
    1. Car To Go
    2. Drive Now
    0. Back
    &gt; 1
    Choose a car:
    1. Hyundai Venue
    2. Maruti Suzuki Dzire
    0. Back
    &gt; 1
    You rented &#39;Hyundai Venue&#39;
    1. Rent a car
    2. Return a rented car
    3. My rented car
    0. Back
    &gt; 0
    1. Log in as a manager
    2. Log in as a customer
    3. Create a customer
    0. Exit
    &gt; 2
    Customer list:
    1. First customer
    2. Second customer
    0. Back
    &gt; 1
    1. Rent a car
    2. Return a rented car
    3. My rented car
    0. Back
    &gt; 1
    Choose a company:
    1. Car To Go
    2. Drive Now
    0. Back
    &gt; 1
    Choose a car:
    1. Maruti Suzuki Dzire
    0. Back
    &gt; 0
    1. Log in as a manager
    2. Log in as a customer
    3. Create a customer
    0. Exit
    &gt; 0
  time: "Sun, 29 Oct 2023 16:21:20 UTC"
record: -1
